package com.orientatua;

import java.io.BufferedInputStream;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.concurrent.ExecutionException;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.orientatua.direction.*;

import android.content.Context;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.Toast;
import java.lang.reflect.Type;
import android.text.Html;

public class DirectionManager {
	private static String key="AIzaSyBwu6y14fhrXhLiqNCaGD4vByhOUOtyr2Y";
	public Direction direction;
	private Context context;
	private String destination;
	private int index;	
	
	public DirectionManager(Context _context) {
		context=_context;
	}
	
	public void makeRequest(String address1, String address2) {
		try {
			RequestTask request=new RequestTask();
			request.execute(address1,address2);
			String result=request.get();
			
			if(result!=null) {
				Toast.makeText(context, result, Toast.LENGTH_SHORT).show();
				if(!parseJSON(result))  
					Toast.makeText(context, "Result null", Toast.LENGTH_SHORT).show();
			}
			else {
				Log.i("Result","NULL");				
			}									
		} catch (InterruptedException e) {		
			e.printStackTrace();
		} catch (ExecutionException e) {			
			e.printStackTrace();
		}
	}
	public Direction getDirection() {
		return direction;
	}
	
	public void setDestination(String destination) {
		this.destination=destination;
	}
	
	public boolean parseJSON(String result) {
		//try {
			//JSONObject json = new JSONObject(result);
			
			Gson gson = new Gson();
            Type collectionType = new TypeToken<Direction>(){}.getType();
			direction=gson.fromJson(result, collectionType);
			
			if(direction.getStatus().equals("OK")) { //El status lo reconoce				
				if(direction.getRoutes()==null) //Fallo con routes
					Toast.makeText(context, "Vacio", Toast.LENGTH_SHORT).show();
				else
					Toast.makeText(context, "No vacio", Toast.LENGTH_SHORT).show();
				
			Toast.makeText(context,direction.getRoutes().get(0).getLegs().get(0).getSteps().get(0).getInstruction(),Toast.LENGTH_SHORT).show();
				return true;
			}
			else
				return false;
			
		/*} catch (JSONException e) {
			return false;
		}*/
		
	}
	
	public String getIndication(int hopedIndex, Orientation orientation) {
		String indication="";
		
		if(hopedIndex<direction.getSteps().size()) {			
			indication=Html.fromHtml(direction.getSteps().get(hopedIndex).getInstruction()).toString();			
			Toast.makeText(context, "Indicacion: "+indication, Toast.LENGTH_SHORT).show();
			String[] words=indication.split("\\s+");
			Toast.makeText(context, "Palabras: "+words[0]+" "+words[1]+" "+words[2]+" "+words[3], Toast.LENGTH_SHORT);		
			for(String word: words) {
				if(Orientation.contains(word)) {
					
					//Probar valueof, comprobar a pelo un valor del enum 
					indication=checkPosition(orientation, Orientation.NORTH);
					break;
				}
			}
			Toast.makeText(context, "Despues: "+indication, Toast.LENGTH_SHORT).show();
			indication+=" y continúa "+direction.getSteps().get(hopedIndex).getDistance().getValue()+" metros";			
		}
		else if(hopedIndex==index)
			indication="Ha llegado a su destino";
		else
			indication="El pr�ximo punto es su destino";
		
		return indication;
	}	
	
	public int getIndex() {
		return index;
	}
	
	public void nextIndex() {
		index++;
	}
	
	public String checkPosition(Orientation user, Orientation indication) {
		String movement="";

		switch(indication) {
			case NORTH: 
				return checkNorth(indication).toString();
				
			case NORTH_EAST: 
				return checkNorthEast(indication).toString();
			
			case EAST: 
				return checkEast(indication).toString();
				
			case SOUTH_EAST: 
				return checkSouthEast(indication).toString();
				
			case SOUTH: 
				return checkSouth(indication).toString();
				
			case SOUTH_WEST: 
				return checkSouthWest(indication).toString();
				
			case WEST: 
				return checkWest(indication).toString();
				
			case NORTH_WEST: 
				return checkNorthWest(indication).toString();
		}
		
		return movement;
	}
	
	public Orientation checkNorth(Orientation orientation) {
		switch (orientation) {
			case NORTH:
				return Orientation.STAY;
				
			case NORTH_EAST:
				return Orientation.LIGHT_RIGHT;
				
			case EAST:
				return Orientation.RIGHT;
				
			case SOUTH_EAST:
				return Orientation.TURN_AND_LEFT;
				
			case SOUTH:
				return Orientation.TURN;
				
			case SOUTH_WEST:
				return Orientation.TURN_AND_RIGHT;
				
			case WEST:
				return Orientation.LEFT;
				
			case NORTH_WEST:
				return Orientation.LIGHT_LEFT;
			
			default:
				return Orientation.ERROR;
		}		
	}
	
	public Orientation checkNorthEast(Orientation orientation) {
		switch (orientation) {
			case NORTH:
				return Orientation.LIGHT_LEFT;
				
			case NORTH_EAST:
				return Orientation.STAY;
				
			case EAST:
				return Orientation.LIGHT_RIGHT;
				
			case SOUTH_EAST:
				return Orientation.RIGHT;
				
			case SOUTH:
				return Orientation.TURN_AND_LEFT;
				
			case SOUTH_WEST:
				return Orientation.TURN;
				
			case WEST:
				return Orientation.TURN_AND_RIGHT;
				
			case NORTH_WEST:
				return Orientation.LEFT;
			
			default:
				return Orientation.ERROR;
		}		
	}
	
	public Orientation checkEast(Orientation orientation) {
		switch (orientation) {
			case NORTH:
				return Orientation.LEFT;
				
			case NORTH_EAST:
				return Orientation.LIGHT_LEFT;
				
			case EAST:
				return Orientation.STAY;
				
			case SOUTH_EAST:
				return Orientation.LIGHT_RIGHT;
				
			case SOUTH:
				return Orientation.RIGHT;
				
			case SOUTH_WEST:
				return Orientation.TURN_AND_LEFT;
				
			case WEST:
				return Orientation.TURN;
				
			case NORTH_WEST:
				return Orientation.TURN_AND_RIGHT;
			
			default:
				return Orientation.ERROR;
		}		
	}
	
	public Orientation checkSouthEast(Orientation orientation) {
		switch (orientation) {
			case NORTH:
				return Orientation.TURN_AND_RIGHT;
				
			case NORTH_EAST:
				return Orientation.LEFT;
				
			case EAST:
				return Orientation.LIGHT_LEFT;
				
			case SOUTH_EAST:
				return Orientation.STAY;
				
			case SOUTH:
				return Orientation.LIGHT_RIGHT;
				
			case SOUTH_WEST:
				return Orientation.RIGHT;
				
			case WEST:
				return Orientation.TURN_AND_LEFT;
				
			case NORTH_WEST:
				return Orientation.TURN;
			
			default:
				return Orientation.ERROR;
		}		
	}
	
	public Orientation checkSouth(Orientation orientation) {
		switch (orientation) {
			case NORTH:
				return Orientation.TURN;
				
			case NORTH_EAST:
				return Orientation.TURN_AND_RIGHT;
				
			case EAST:
				return Orientation.LEFT;
				
			case SOUTH_EAST:
				return Orientation.LIGHT_LEFT;
				
			case SOUTH:
				return Orientation.STAY;
				
			case SOUTH_WEST:
				return Orientation.LIGHT_RIGHT;
				
			case WEST:
				return Orientation.RIGHT;
				
			case NORTH_WEST:
				return Orientation.TURN_AND_LEFT;
			
			default:
				return Orientation.ERROR;
		}		
	}
	
	public Orientation checkSouthWest(Orientation orientation) {
		switch (orientation) {
			case NORTH:
				return Orientation.TURN_AND_LEFT;
				
			case NORTH_EAST:
				return Orientation.TURN;
				
			case EAST:
				return Orientation.TURN_AND_RIGHT;
				
			case SOUTH_EAST:
				return Orientation.LEFT;
				
			case SOUTH:
				return Orientation.LIGHT_LEFT;
				
			case SOUTH_WEST:
				return Orientation.STAY;
				
			case WEST:
				return Orientation.LIGHT_RIGHT;
				
			case NORTH_WEST:
				return Orientation.RIGHT;
			
			default:
				return Orientation.ERROR;
		}		
	}
	
	public Orientation checkWest(Orientation orientation) {
		switch (orientation) {
			case NORTH:
				return Orientation.RIGHT;
				
			case NORTH_EAST:
				return Orientation.TURN_AND_LEFT;
				
			case EAST:
				return Orientation.TURN;
				
			case SOUTH_EAST:
				return Orientation.TURN_AND_RIGHT;
				
			case SOUTH:
				return Orientation.LEFT;
				
			case SOUTH_WEST:
				return Orientation.LIGHT_LEFT;
				
			case WEST:
				return Orientation.STAY;
				
			case NORTH_WEST:
				return Orientation.LIGHT_RIGHT;
			
			default:
				return Orientation.ERROR;
		}		
	}
	
	public Orientation checkNorthWest(Orientation orientation) {
		switch (orientation) {
			case NORTH:
				return Orientation.LIGHT_RIGHT;
				
			case NORTH_EAST:
				return Orientation.RIGHT;
				
			case EAST:
				return Orientation.TURN_AND_LEFT;
				
			case SOUTH_EAST:
				return Orientation.TURN;
				
			case SOUTH:
				return Orientation.TURN_AND_RIGHT;
				
			case SOUTH_WEST:
				return Orientation.LEFT;
				
			case WEST:
				return Orientation.LIGHT_LEFT;
				
			case NORTH_WEST:
				return Orientation.STAY;
			
			default:
				return Orientation.ERROR;
		}		
	}
	
	private class RequestTask extends AsyncTask<String, Void, String> {

		@Override
		protected String doInBackground(String... params) {
			String str="https://maps.googleapis.com/maps/api/directions/json";
		    /*str+="?origin="+params[0];
			str+="&destination="+params[1];
			str+="&key="+key;
			str+="&mode=walking";
			str+="&language=es";*/
			str="https://maps.googleapis.com/maps/api/directions/json?origin=Calle%20San%20Pablo%2013%2003690%20San%20Vicente%20del%20RaspeigAlicanteEspa%C3%B1a&destination=Plaza%20Santa%20Faz03690SanVicentedelRaspeig%20Alicante%20Espa%C3%B1a&mode=walking&language=es";
			
			try {
				URL url= new URL(str);
	  		    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
	  		    connection.setRequestMethod("GET");
	  		    connection.setRequestProperty("Content-length", "0");
	            connection.setUseCaches(false);
	            connection.setAllowUserInteraction(false);	            
	  		    connection.connect();
		  		
	  		    int status=connection.getResponseCode();
	  		    Log.i("Status",status+"");
	  		    if(status>=200 ||  status<=202) {
	  		    	BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));	  		    	
	                StringBuilder sb = new StringBuilder();
	                String line;
	                while ((line = br.readLine()) != null) {
	                    sb.append(line+"\n");	                
	                }
	                br.close();
	                return sb.toString();
	  		    }	  		    
				
			} catch (Exception ex) {			
				return null;
			}		
			return null;
		}
		
	}
}
